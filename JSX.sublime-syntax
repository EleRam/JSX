%YAML 1.2
---
name: JSX
file_extensions: [jsx]
scope: source.js.jsx
variables:
  reservedWords: "(break|case|catch|class|const|continue|debugger|default|delete|do|else|export|extends|finally|for|function|from|if|import|in|instanceof|new|return|super|switch|this|throw|try|typeof|var|void|while|with|yield|enum|implements|interface|let|package|private|protected|public|static|await|abstract|boolean|byte|char|double|final|float|goto|int|long|native|short|synchronized|throws|transient|volatile)"
  typeWords: "(type|declare)"
  constantWords: "(true|false|null|Infinity|NaN|undefined)"
  tagStart: '<(?=\w)'
  validType: '([\?\w\[\]\.\*]*(?:<.*?>)?)'
  typeParams: '(?<=:)\s*({{validType}})(?=[,\)\}\s=])'
contexts:
  main:
    - include: javascript
    - include: jsx

  
  #
  # JSX
  # 
  
  jsx:
    - match: '{{tagStart}}'
      scope: entity.name.tag.jsx
      set: [metajsx, jsxTags]

  metajsx:
    - meta_scope: meta.jsx
    - match: ''
      pop: true
  
  jsxTags:
    - meta_scope: entity.name.tag.jsx

    - include: strings
    - include: comments
    
    - match: (?<=\{)
      push: javascriptEmbedded

    - match: '(?<=\>)(?!\s*?[<}])'
      push: 
        - clear_scopes: true
        - meta_scope: source.js.jsx meta.jsx 
        - include: constantEntity
        - include: comments
        - match: \{
          scope: entity.name.tag.jsx
          push: javascriptEmbedded
        - match: '\}'
          scope: entity.name.tag.jsx
        - match: '(?=<)'
          pop: true

    - match: '{{tagStart}}'
      push: jsxTags

    - match: '<?\/\w*>'
      scope: entity.name.tag.jsx
      pop: true


  javascriptEmbedded:
    - clear_scopes: true
    - meta_scope: source.js.jsx
    - include: jsx
    - include: javascript

    - match: '\{'
      push: jsEmbeddedInner

    - match: '\}'
      scope: entity.name.tag.jsx
      pop: true
  
  jsEmbeddedInner:
    - clear_scopes: true
    - meta_scope: source.js.jsx
    - include: jsx
    - include: javascript

    - match: '\{'
      push: jsEmbeddedInner

    - match: '\}'
      pop: true
    
  #
  # JS
  # 
  
  javascript: 
    - include: flow
    - include: keywords
    - include: constants
    - include: strings
    - include: comments

  comments: 
    - scope: comment.block.jsx
      match: \{/\*
      push:
        - meta_scope: comment.block.jsx
        - match: \*/\}
          pop: true
    - scope: comment.block.js
      match: /\*
      push:
        - meta_scope: comment.block.js
        - match: \*/
          pop: true

    - scope: comment.line.js
      match: (//).*$\n?

  keywords:
    - match: '\b{{reservedWords}}\b'
      scope: keyword.control.js 
    - match: '\b{{typeWords}}\b'
      scope: keyword.control.js

  constants:
    - match: '\b{{constantWords}}\b'
      scope: constant.language.js
    - match: >-
        (?xi)
          (?:\B[-+])?
          (?:
            \b0b[0-1]*|                 # binary
            \b0o[0-7]*|                 # octal
            \b0x[0-9a-f]*|              # hex
            (
              \B\.[0-9]+|               # e.g. .999
              \b[0-9]+(\.[0-9]*)?       # e.g. 999.999, 999. or 999
            )(e[-+]?[0-9]+)?            # e.g. e+123, E-123
          )
      scope: constant.numeric.js

  constantEntity:
    - match: (&[\w#]*?;)
      scope: constant.character.entity.html  

  constantEscape:
    - match: \\.
      scope: constant.character.escape

  strings: 
    - match: "'"
      push: stringSingle
    - match: "\""
      push: stringDouble
    - match: "`"
      push: stringTemplate
    - match: (?<=[=(:]|^|return|&&|\|\||!)\s*(/)(?![/*+{}?>])
      push: stringRegex

  stringSingle: 
    - meta_scope: string.quoted.js
    - include: constantEscape
    - include: constantEntity
    - match: "'"
      pop: true

  stringDouble: 
    - meta_scope: string.quoted.js
    - include: constantEscape
    - include: constantEntity
    - match: "\""
      pop: true

  stringRegex:
    - meta_scope: string.regexp.js
    - include: constantEscape
    # Match ending slash and flag but only if not in a [] character class
    - match: '\/[gimuy]?(?!.*\])'
      pop: true

  stringTemplate:
    - meta_scope: string.quoted.js
    - include: constantEscape
    - include: constantEntity
    - match: (?<=\${)
      push: templateExpressions
    - match: "`"
      pop: true

  templateExpressions:
    - clear_scopes: true
    - include: javascript
    - include: jsx
    - match: \}
      scope: string.quoted.js
      pop: true

  flow: 
    # class types
    # ONLY space SOME word THEN : THEN type THEN ;
    - match: '^\s*\w+:\s*{{validType}}(?=;)'
      captures:
        1: entity.name.type

    - match: '\):'
      push: flowFunctionReturns

    - match: '\('
      push: flowFunctionParams

    - match: '(?<=type|declare)\s*\w*\s*=\s*{'
      push: flowTypeDeclarations

    # Variables
    - match: '(?<=const|let|var)(?:\s*\w*:\s*){{validType}}\s*='
      captures:
        1: entity.name.type

  flowFunctionReturns:
    - meta_scope: meta.type.js
    - match: '{{typeParams}}'
      scope: entity.name.type
    - match: '{$'
      pop: true
    - match: '(?={return)'
      pop: true
    - match: '(?=\=>)'
      pop: true
    
  flowFunctionParams:
    - meta_scope: meta.type.js
    - match: '{{typeParams}}'
      scope: entity.name.type
    - match: '(?=\))'
      pop: true
    - match: '\('
      push: flowFunctionParams
    - match: '{'
      push: 
        - meta_scope: meta.object
        - include: javascript
        - match: '}'
          pop: true
    - include: javascript

  flowTypeDeclarations:
    - meta_scope: meta.type.js
    - match: '{{typeParams}}'
      scope: entity.name.type
    - match: '}'
      pop: true

