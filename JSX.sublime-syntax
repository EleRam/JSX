%YAML 1.2
---
name: JSX
file_extensions: [jsx]
scope: source.js.jsx
variables:
  reservedWords: "(break|case|catch|class|const|continue|debugger|default|delete|do|else|export|extends|finally|for|function|from|if|import|in|instanceof|new|return|super|switch|this|throw|try|typeof|var|void|while|with|yield|enum|implements|interface|let|package|private|protected|public|static|await|abstract|boolean|byte|char|double|final|float|goto|int|long|native|short|synchronized|throws|transient|volatile)"
  constantWords: "(true|false|null|Infinity|NaN|undefined)"

  tag: entity.name.tag.jsx
contexts:
  main:
    - include: javascript
    - include: jsx
  
  #
  # JSX
  # 
  
  jsx:
    - include: tags
    - include: attributes

  tags: 
    - match: \s*?<[\w/]
      scope: entity.name.tag.jsx
      set: [metajsx, tag]
    
  attributes: 
    - match: \b([a-zA-Z\-:_]+)=
      scope: entity.name.tag.jsx
      push: [metajsx, tag]

  metajsx:
    - meta_scope: meta.jsx
    - match: ''
      pop: true

  tag:
    - meta_scope: entity.name.tag.jsx
    - include: strings
    - include: comments
    - match: \{
      push: javascriptEmbedded
    - match: '>(?=[;\)])'
      pop: true
    - match: '>\n'
      pop: true
    - match: '>'
      pop: true

  javascriptEmbedded:
    - clear_scopes: 1
    - include: jsx
    - include: javascript
    - match: \}(\s*?)([\}]+)?
      pop: true
    
  #
  # JS
  # 
  
  javascript: 
    - include: keywords
    - include: constants
    - include: strings
    - include: comments

  comments: 
    - scope: comment.block.jsx
      match: \{/\*
      push:
        - meta_scope: comment.block.jsx
        - match: \*/\}
          pop: true
    - scope: comment.block.js
      match: /\*
      push:
        - meta_scope: comment.block.js
        - match: \*/
          pop: true

    - scope: comment.line.js
      match: (//).*$\n?

  keywords:
    - match: '\b{{reservedWords}}\b'
      scope: keyword.control.js

  constants:
    - match: '\b{{constantWords}}\b'
      scope: constant.language.js
    - match: >-
        (?xi)
          (?:\B[-+])?
          (?:
            \b0b[0-1]*|                 # binary
            \b0o[0-7]*|                 # octal
            \b0x[0-9a-f]*|              # hex
            (
              \B\.[0-9]+|               # e.g. .999
              \b[0-9]+(\.[0-9]*)?       # e.g. 999.999, 999. or 999
            )(e[-+]?[0-9]+)?            # e.g. e+123, E-123
          )
      scope: constant.numeric.js

  constantEntity:
    - match: (&[\w#]*?;)
      scope: constant.other.js    

  constantEscape:
    - match: \\.
      scope: constant.character.escape

  strings: 
    - match: "'"
      push: stringSingle
    - match: "\""
      push: stringDouble
    - match: "`"
      push: stringTemplate
    - match: (?<=[=(:]|^|return|&&|\|\||!)\s*(/)(?![/*+{}?>])
      push: stringRegex

  stringSingle: 
    - meta_scope: string.quoted.js
    - include: constantEscape
    - include: constantEntity
    - match: "'"
      pop: true

  stringDouble: 
    - meta_scope: string.quoted.js
    - include: constantEscape
    - include: constantEntity
    - match: "\""
      pop: true

  stringRegex:
    - meta_scope: string.regexp.js
    - include: constantEscape
    - match: "/[gimuy]?"
      pop: true

  stringTemplate:
    - meta_scope: string.quoted.js
    - include: constantEscape
    - include: constantEntity
    - match: \${
      push: templateExpressions
    - match: "`"
      pop: true

  templateExpressions:
    - clear_scopes: true
    - include: javascript
    - match: \}
      pop: true

