%YAML 1.2
---
name: JSX
file_extensions: [jsx]
scope: source.js.jsx
variables:
  reservedWords: "(arguments|break|case|catch|class|const|continue|debugger|default|delete|do|else|export|extends|finally|for|function|from|if|import|in|instanceof|new|return|super|switch|this|throw|try|typeof|var|void|while|with|yield|enum|implements|interface|let|package|private|protected|public|static|await|abstract|boolean|byte|char|double|final|float|goto|int|long|native|short|synchronized|throws|transient|volatile)"
  typeWords: "(type|declare)"
  builtInObjects: "(console|Object|Function|Boolean|Symbol|Error|EvalError|InternalError|RangeError|ReferenceError|SyntaxError|TypeError|URIError|Number|Math|Date|String|RegExp|Array|Int8Array|Uint8Array|Uint8ClampedArray|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array|Float64Array|Map|Set|WeakMap|WeakSet|SIMD|ArrayBuffer|SharedArrayBuffer|Atomics|DataView|JSON|Promise|Generator|GeneratorFunction|AsyncFunction|Reflect|Proxy|Intl|WebAssembly|Iterator|ParallelArray|StopIteration)"
  builtInFunctions: "eval|isFinite|isNaN|parseFloat|parseInt|decodeURI|decodeURIComponent|encodeURI|encodeURIComponent|escape|unescape"
  constantWords: "(true|false|null|Infinity|NaN|undefined)"
  tagStart: '<(?=\w)'
  validTypeSingle: '[\?\w\[\]\.\*]*(<.*?>)?'
  validType: '{{validTypeSingle}}(\s*\|\s*{{validTypeSingle}})*'
  typeParams: '(?<=:)\s*{{validType}}'
contexts:
  main:
    - include: jsx
    - include: javascript

    - match: '(?<=type|declare)\s*\w*\s*='
      push: typeDeclarations
  
  #
  # JSX
  # 
  
  jsx:
    - match: '{{tagStart}}'
      scope: entity.name.tag.jsx
      push: jsxSection
    - match: (?<=[\w\/])\>
      scope: entity.name.tag.jsx

  jsxSection:
    - meta_scope: meta.jsx
    - include: jsxTags


  jsxSectionInner: 
    - meta_scope: meta.jsx
    - include: jsxTags

  jsxTags:
    
    - include: strings
    
    - match: \b[\w-]*\b
      scope: entity.name.tag.jsx

    - match: \=
      scope: entity.name.tag.jsx

    # Recursion
    - match: '{{tagStart}}'
      scope: entity.name.tag.jsx
      push: jsxSectionInner

    # Embedding
    - match: \{
      scope: entity.name.tag.jsx
      push: javascriptEmbedded
    
    # End
    - match: '<?\/\w*'
      scope: entity.name.tag.jsx
      pop: true

    - match: '>'
      scope: entity.name.tag.jsx
      push:
        - include: comments
        - match: \{
          scope: entity.name.tag.jsx
          push: javascriptEmbedded
        - match: (?=<)
          pop: true

  javascriptEmbedded:
    - clear_scopes: 1
    - meta_scope: source.js.jsx
    - include: jsx
    - include: javascript

    - match: '\{'
      push: jsEmbeddedInner

    - match: '\}'
      scope: entity.name.tag.jsx
      pop: true
  
  jsEmbeddedInner:
    - clear_scopes: 1
    - meta_scope: source.js.jsx
    - include: jsx
    - include: javascript

    - match: '\{'
      push: jsEmbeddedInner

    - match: '\}'
      pop: true
    
  #
  # JS
  # 
  
  javascript: 
    - include: types
    - include: keywords
    - include: constants
    - include: strings
    - include: comments
    - include: support
    # - include: bracketsGroup

  comments: 
    - scope: comment.block.jsx
      match: \{/\*
      push:
        - meta_scope: comment.block.jsx
        - match: \*/\}
          pop: true
    - scope: comment.block.js
      match: /\*
      push:
        - meta_scope: comment.block.js
        - match: \*/
          pop: true

    - scope: comment.line.js
      match: (//).*$\n?

  keywords:
    - match: '\b{{reservedWords}}\b'
      scope: keyword.control.js 
    # - match: '^\s*{{typeWords}}\s'
    - match: '^\s*{{typeWords}}\b(?![:])'
      scope: keyword.control.js

  constants:
    - match: '(?<![.])\b{{constantWords}}\b'
      scope: constant.language.js
    - match: >-
        (?xi)
          (?:\B[-+])?
          (?:
            \b0b[0-1]*|                 # binary
            \b0o[0-7]*|                 # octal
            \b0x[0-9a-f]*|              # hex
            (
              \B\.[0-9]+|               # e.g. .999
              \b[0-9]+(\.[0-9]*)?       # e.g. 999.999, 999. or 999
            )(e[-+]?[0-9]+)?            # e.g. e+123, E-123
          )
      scope: constant.numeric.js

  constantEntity:
    - match: (&[\w#]*?;)
      scope: constant.character.entity.html  

  constantEscape:
    - match: \\.
      scope: constant.character.escape

  strings: 
    - match: "'"
      push: stringSingle
    - match: "\""
      push: stringDouble
    - match: "`"
      push: stringTemplate
    - match: (?<=[=(:]|^|return|&&|\|\||!)\s*(/)(?![/*+{}?>])
      push: stringRegex

  stringSingle: 
    - meta_scope: string.quoted.js
    - include: constantEscape
    - include: constantEntity
    - match: "'"
      pop: true

  stringDouble: 
    - meta_scope: string.quoted.js
    - include: constantEscape
    - include: constantEntity
    - match: "\""
      pop: true

  stringRegex:
    - meta_scope: string.regexp.js
    - include: constantEscape
    - match: \[
      push: 
        - meta_scope: meta.regexpCharacterClass
        - include: constantEscape
        - match: \]
          pop: true
    - match: '/[gimuy]?'
      pop: true

  stringTemplate:
    - meta_scope: string.quoted.js
    - include: constantEscape
    - include: constantEntity
    - match: (?<=\${)
      push: templateExpressions
    - match: "`"
      pop: true

  templateExpressions:
    - clear_scopes: true
    - include: javascript
    - include: jsx
    - match: \}
      scope: string.quoted.js
      pop: true

  support:
    - match: \b{{builtInObjects}}\b
      scope: support.class.js
    - match: \b{{builtInFunctions}}\b
      scope: support.function.js
    
    - match: (?<=console\.)(assert|clear|count|dir|dirxml|error|group|groupCollapsed|groupEnd|info|log|profile|profileEnd|table|time|timeEnd|timeStamp|trace|warn)\b
      scope: support.function.js

    - match: (?<=Object\.)(length|name|arguments|caller|prototype|assign|getOwnPropertyDescriptor|getOwnPropertyDescriptors|getOwnPropertyNames|getOwnPropertySymbols|is|preventExtensions|seal|create|defineProperties|defineProperty|freeze|getPrototypeOf|setPrototypeOf|isExtensible|isFrozen|isSealed|keys|entries|values)\b
      scope: support.function.js
    - match: (?<=Function\.)(length|name|arguments|caller|prototype)\b
      scope: support.function.js
    - match: (?<=Boolean\.)(length|name|arguments|caller|prototype)\b
      scope: support.function.js
    - match: (?<=Symbol\.)(length|name|arguments|caller|prototype|for|keyFor|hasInstance|isConcatSpreadable|iterator|match|replace|search|species|split|toPrimitive|toStringTag|unscopables|observable)\b
      scope: support.function.js
    - match: (?<=Error\.)(length|name|arguments|caller|prototype|captureStackTrace|stackTraceLimit)\b
      scope: support.function.js
    - match: (?<=EvalError\.)(length|name|arguments|caller|prototype)\b
      scope: support.function.js
    - match: (?<=RangeError\.)(length|name|arguments|caller|prototype)\b
      scope: support.function.js
    - match: (?<=ReferenceError\.)(length|name|arguments|caller|prototype)\b
      scope: support.function.js
    - match: (?<=SyntaxError\.)(length|name|arguments|caller|prototype)\b
      scope: support.function.js
    - match: (?<=TypeError\.)(length|name|arguments|caller|prototype)\b
      scope: support.function.js
    - match: (?<=URIError\.)(length|name|arguments|caller|prototype)\b
      scope: support.function.js
    - match: (?<=Number\.)(length|name|arguments|caller|prototype|isFinite|isInteger|isNaN|isSafeInteger|parseFloat|parseInt|MAX_VALUE|MIN_VALUE|NaN|NEGATIVE_INFINITY|POSITIVE_INFINITY|MAX_SAFE_INTEGER|MIN_SAFE_INTEGER|EPSILON)\b
      scope: support.function.js
    - match: (?<=Math\.)(abs|acos|acosh|asin|asinh|atan|atanh|atan2|ceil|cbrt|expm1|clz32|cos|cosh|exp|floor|fround|hypot|imul|log|log1p|log2|log10|max|min|pow|random|round|sign|sin|sinh|sqrt|tan|tanh|trunc|E|LN10|LN2|LOG10E|LOG2E|PI|SQRT1_2|SQRT2)\b\b
      scope: support.function.js
    - match: (?<=Date\.)(length|name|arguments|caller|prototype|now|parse|UTC)\b
      scope: support.function.js
    - match: (?<=String\.)(length|name|arguments|caller|prototype|fromCharCode|fromCodePoint|raw)\b
      scope: support.function.js
    - match: (?<=RegExp\.)(length|name|arguments|caller|prototype|input|\$_|lastMatch|\$&|lastParen|\$\+|leftContext|\$\`|rightContext|\$\'|\$1|\$2|\$3|\$4|\$5|\$6|\$7|\$8|\$9)\b
      scope: support.function.js
    - match: (?<=Array\.)(length|name|arguments|caller|prototype|isArray|from|of)\b
      scope: support.function.js
    - match: (?<=Int8Array\.)(length|name|arguments|caller|prototype|BYTES_PER_ELEMENT)\b
      scope: support.function.js
    - match: (?<=Uint8Array\.)(length|name|arguments|caller|prototype|BYTES_PER_ELEMENT)\b
      scope: support.function.js
    - match: (?<=Uint8ClampedArray\.)(length|name|arguments|caller|prototype|BYTES_PER_ELEMENT)\b
      scope: support.function.js
    - match: (?<=Int16Array\.)(length|name|arguments|caller|prototype|BYTES_PER_ELEMENT)\b
      scope: support.function.js
    - match: (?<=Uint16Array\.)(length|name|arguments|caller|prototype|BYTES_PER_ELEMENT)\b
      scope: support.function.js
    - match: (?<=Int32Array\.)(length|name|arguments|caller|prototype|BYTES_PER_ELEMENT)\b
      scope: support.function.js
    - match: (?<=Uint32Array\.)(length|name|arguments|caller|prototype|BYTES_PER_ELEMENT)\b
      scope: support.function.js
    - match: (?<=Float32Array\.)(length|name|arguments|caller|prototype|BYTES_PER_ELEMENT)\b
      scope: support.function.js
    - match: (?<=Float64Array\.)(length|name|arguments|caller|prototype|BYTES_PER_ELEMENT)\b
      scope: support.function.js
    - match: (?<=Map\.)(length|name|arguments|caller|prototype)\b
      scope: support.function.js
    - match: (?<=Set\.)(length|name|arguments|caller|prototype)\b
      scope: support.function.js
    - match: (?<=WeakMap\.)(length|name|arguments|caller|prototype)\b
      scope: support.function.js
    - match: (?<=WeakSet\.)(length|name|arguments|caller|prototype)\b
      scope: support.function.js
    - match: (?<=ArrayBuffer\.)(length|name|arguments|caller|prototype|isView)\b
      scope: support.function.js
    - match: (?<=DataView\.)(length|name|arguments|caller|prototype)\b
      scope: support.function.js
    - match: (?<=JSON\.)(parse|stringify)\b
      scope: support.function.js
    - match: (?<=Promise\.)(length|name|arguments|caller|prototype|resolve|reject|all|race)\b
      scope: support.function.js
    - match: (?<=Reflect\.)(defineProperty|deleteProperty|apply|construct|get|getOwnPropertyDescriptor|getPrototypeOf|has|isExtensible|ownKeys|preventExtensions|set|setPrototypeOf)\b
      scope: support.function.js
    - match: (?<=Proxy\.)(length|name|arguments|caller|revocable)\b
      scope: support.function.js
    - match: (?<=Intl\.)(DateTimeFormat|NumberFormat|Collator|v8BreakIterator|getCanonicalLocales)\b
      scope: support.function.js
    - match: (?<=WebAssembly\.)(compile|validate|instantiate|Module|Instance|Table|Memory|CompileError|LinkError|RuntimeError)\b
      scope: support.function.js


  types: 
    - include: functionDeclarations
    - include: arrowFunctionDeclarations
    - include: classDeclaration

    # Variables
    - match: '(?<=const|let|var)(?:\s*\w*:\s*)({{validType}})\s*='
      captures:
        1: entity.name.type




    
    # class
  classDeclaration:
    - match: \bclass\b
      scope: keyword.control.js
      set:
        - include: main
        - match: \(
          push: classDeclarationFunctionCall
        - match: \{
          set: classBody

  classDeclarationFunctionCall:
    - include: main
    - match: \(
      push: classDeclarationFunctionCall
    - match: \)
      pop: true

  classBody: 
    - meta_scope: meta.classDeclaration.js
    - include: main
    - include: classBrackets

    - match: '^\s*\w+:\s*({{validType}})(?=;)'
      captures:
        1: entity.name.type

    - match: \w*\(
      push: 
        - meta_scope: meta.function.declaration
        - include: typeFunctionDeclaration
        - include: typeFunctionReturns
        - include: functionDeclarations
        - include: main
        - match: "(?={)"
          pop: true

    - match: "}"
      pop: true
  
  classBrackets:
    - match: "{"
      push: 
        - meta_scope: meta.classBrackets.js
        - match: "}"
          pop: true
        - include: classBrackets
        - include: main

  functionDeclarations:
    - match: '(?<=function)[\s\w]*(?=\()'
      push: 
        - meta_scope: meta.function.declaration
        - include: typeFunctionDeclaration
        - include: typeFunctionReturns
        - include: javascript
        - match: "{"
          pop: true

  arrowFunctionDeclarations:
    # opening bracket then word or ) any ammount of not )
    - match: '\((?=[\w)][^\(]*=>)'
      push: arrowFunctionDeclarationStack

  arrowFunctionDeclarationStack:
    - meta_scope: meta.functionDeclaration.js
    - include: arrowFunctionDeclarations
    - include: typeFunctionDeclaration
    - include: typeFunctionReturns
    - include: javascript
    - match: "=>"
      pop: true

    
  
  typeFunctionDeclaration:
    - match: '(?<!return\ )\('
      push: 
        - meta_scope: meta.type.flowFunctionParams.js
        - include: javascript
        - match: '{{typeParams}}'
          scope: entity.name.type
        - match: '(?=\))'
          pop: true


  typeFunctionReturns:
    - meta_scope: meta.type.js
    - match: '{{typeParams}}'
      scope: entity.name.type
    - match: '{{typeParams}}\s(?={)'
      scope: entity.name.type

  typeDeclarations:
    - meta_scope: meta.type.js
    - include: arrowFunctionDeclarations
    - include: typeFunctionDeclaration
    - include: typeFunctionReturns

    - match: '{{typeParams}}'
      scope: entity.name.type
    - match: '{{validType}}(?=[;\n])'
      scope: entity.name.type
      
    - match: ';'
      pop: true
    - match: '}'
      pop: true


